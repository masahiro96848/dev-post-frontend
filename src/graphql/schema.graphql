scalar Date

type User {
  id: ID
  email: String
  name: String
  created_at: Date
  updated_at: Date
}

type Post {
  id: ID
  title: String!
  body: String
  imageUrl: String
  isPublished: Int
  uid: String!
  user: User!
  favorited: Boolean
  favoritesCount: Int!
  createdAt: Date
  updatedAt: Date
}

type Favorite {
  id: ID!
  user: User!
  post: Post!
  created_at: Date!
}

type Query {
  viewer: User!
  posts(limit: Int, offset: Int): [Post!]!
  postDetail(uid: String!, name: String!): Post!
  myPosts: [Post!]!
  favorites: [Favorite!]!
  totalPosts: Int!
}

input SigninInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  password: String!
  passwordConfirmation: String!
}

input SignoutInput {
  userId: String
}

input PostEditInput {
  title: String!
  body: String
  imageUrl: String
  isPublished: Int!
  uid: String!
}

input AddFavoriteInput {
  postId: String!
}

input RemoveFavoriteInput {
  postId: String!
}

input PostSortInput {
  sortBy: String!
  order: String!
  limit: Int
  offset: Int
}

type Mutation {
  signin(input: SigninInput!): SigninPayload
  signup(input: SignupInput!): SignupPayload
  signout(input: SignoutInput!): Boolean!
  postEdit(input: PostEditInput!): PostEditPayload!
  addFavorite(input: AddFavoriteInput!): AddFavoritePayload!
  removeFavorite(input: RemoveFavoriteInput!): RemoveFavoritePayload!
  postSort(input: PostSortInput!): PostSortPayload!
}

type SigninPayload {
  user: User
  errors: [String!]
}

type SignupPayload {
  user: User
  errors: [String!]
}

type PostEditPayload {
  post: Post
  errors: [String!]
}

type AddFavoritePayload {
  favorite: Favorite
  post: Post
  errors: [String!]
}

type RemoveFavoritePayload {
  post: Post
  success: Boolean!
  errors: [String!]
}

type PostSortPayload {
  posts: [Post!]!
}
